// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package button

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "strings"

// Size represents button size modifiers
type Size string

const (
	IsSmall  Size = "is-small"  // Small button size
	IsNormal Size = "is-normal" // Normal button size (default)
	IsMedium Size = "is-medium" // Medium button size
	IsLarge  Size = "is-large"  // Large button size
)

// Color represents button color variants
type Color string

const (
	IsBlack   Color = "is-black"   // Black button
	IsDark    Color = "is-dark"    // Dark button
	IsDanger  Color = "is-danger"  // Danger/error button (red)
	IsInfo    Color = "is-info"    // Info button (blue)
	IsLight   Color = "is-light"   // Light button
	IsLink    Color = "is-link"    // Link-style button
	IsPrimary Color = "is-primary" // Primary button (brand color)
	IsSuccess Color = "is-success" // Success button (green)
	IsText    Color = "is-text"    // Text-only button
	IsWarning Color = "is-warning" // Warning button (yellow)
	IsWhite   Color = "is-white"   // White button
)

// Alignment represents button alignment within containers
type Alignment string

const (
	IsCentered Alignment = "is-centered" // Center align buttons
	IsRight    Alignment = "is-right"    // Right align buttons
)

// ButtonsSize represents size modifiers for button groups
type ButtonsSize string

const (
	AreSmall  ButtonsSize = "are-small"  // All buttons in group are small
	AreMedium ButtonsSize = "are-medium" // All buttons in group are medium
	AreLarge  ButtonsSize = "are-large"  // All buttons in group are large
)

// ButtonProps defines configuration for individual button elements.
//
// Use this type to configure Bulma button elements with various
// colors, sizes, states, and styling options. Can render as
// button, anchor, or input elements based on props.
type ButtonProps struct {
	// Optional HTML id attribute for the button
	ID string

	// List of additional CSS classes to apply to the button
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Button color variant (primary, success, danger, etc.)
	Color Color

	// Render as <a> tag instead of <button>
	IsAnchor bool

	// Render as <input> tag instead of <button>
	IsInput bool

	// HTML type attribute (button, submit, reset, etc.)
	Type string

	// Button spans full width of container
	IsFullwidth bool

	// Use responsive button sizing across breakpoints
	IsResponsive bool

	// Button size (small, normal, medium, large)
	Size Size

	// Apply active state styling
	IsActive bool

	// Expand to fill available width
	IsExpanded bool

	// Apply focused state styling
	IsFocused bool

	// Apply hovered state styling
	IsHovered bool

	// Apply selected state styling
	IsSelected bool

	// Apply bold text styling
	IsBold bool

	// Transparent background with border
	IsGhost bool

	// Invert text and background colors
	IsInverted bool

	// Show loading spinner, disable interaction
	IsLoading bool

	// Outlined style with transparent background
	IsOutlined bool

	// Apply rounded corners
	IsRounded bool

	// Apply soft/subtle styling
	IsSoft bool

	// Non-interactive button for labels/alignment
	IsStatic bool
}

// Button renders individual button elements.
//
// This component renders Bulma's .button class with extensive
// customization options. Can render as <button>, <a>, or <input>
// elements based on props. Supports all Bulma button colors,
// sizes, states, and styling modifiers. Perfect for forms,
// navigation, calls-to-action, and interactive elements.
func Button(props ...ButtonProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p ButtonProps
		if len(props) > 0 {
			p = props[0]
		}
		if p.IsInput {
			var templ_7745c5c3_Var2 = []any{"button",
				templ.KV(string(p.Size), p.Size != ""),
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-responsive", p.IsResponsive),
				templ.KV("is-bold", p.IsBold),
				templ.KV("is-ghost", p.IsGhost),
				templ.KV("is-inverted", p.IsInverted),
				templ.KV("is-loading", p.IsLoading),
				templ.KV("is-outlined", p.IsOutlined),
				templ.KV("is-rounded", p.IsRounded),
				templ.KV("is-soft", p.IsSoft),
				templ.KV("is-static", p.IsStatic),
				templ.KV("is-fullwidth", p.IsFullwidth),
				templ.KV("is-active", p.IsActive),
				templ.KV("is-expanded", p.IsExpanded),
				templ.KV("is-focused", p.IsFocused),
				templ.KV("is-hovered", p.IsHovered),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<input")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if p.ID != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 140, Col: 13}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if p.Type != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " type=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(p.Type)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 143, Col: 17}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " type=\"button\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else if p.IsAnchor {
			var templ_7745c5c3_Var6 = []any{"button",
				templ.KV(string(p.Size), p.Size != ""),
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-responsive", p.IsResponsive),
				templ.KV("is-bold", p.IsBold),
				templ.KV("is-ghost", p.IsGhost),
				templ.KV("is-inverted", p.IsInverted),
				templ.KV("is-loading", p.IsLoading),
				templ.KV("is-outlined", p.IsOutlined),
				templ.KV("is-rounded", p.IsRounded),
				templ.KV("is-soft", p.IsSoft),
				templ.KV("is-static", p.IsStatic),
				templ.KV("is-fullwidth", p.IsFullwidth),
				templ.KV("is-active", p.IsActive),
				templ.KV("is-expanded", p.IsExpanded),
				templ.KV("is-focused", p.IsFocused),
				templ.KV("is-hovered", p.IsHovered),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var6...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<a")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if p.ID != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, " id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 173, Col: 13}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, " class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var6).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			var templ_7745c5c3_Var9 = []any{"button",
				templ.KV(string(p.Size), p.Size != ""),
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-responsive", p.IsResponsive),
				templ.KV("is-bold", p.IsBold),
				templ.KV("is-ghost", p.IsGhost),
				templ.KV("is-inverted", p.IsInverted),
				templ.KV("is-loading", p.IsLoading),
				templ.KV("is-outlined", p.IsOutlined),
				templ.KV("is-rounded", p.IsRounded),
				templ.KV("is-soft", p.IsSoft),
				templ.KV("is-static", p.IsStatic),
				templ.KV("is-fullwidth", p.IsFullwidth),
				templ.KV("is-active", p.IsActive),
				templ.KV("is-expanded", p.IsExpanded),
				templ.KV("is-focused", p.IsFocused),
				templ.KV("is-hovered", p.IsHovered),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var9...)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<button")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if p.ID != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " id=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 203, Col: 13}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if p.Type != "" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " type=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var11 string
				templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(p.Type)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 206, Col: 17}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, " type=\"button\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, " class=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var9).String())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 1, Col: 0}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

// ButtonsProps defines configuration for button group containers.
// Use this type to configure Bulma .buttons containers
// that group multiple button elements with consistent
// sizing, alignment, and connection options.
type ButtonsProps struct {
	// Optional HTML id attribute for the button group
	ID string

	// List of additional CSS classes to apply to the group
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Horizontal alignment of buttons (centered, right)
	Alignment Alignment

	// Uniform size for all buttons in group
	Size ButtonsSize

	// Connect buttons together without gaps
	HasAddons bool
}

// Buttons renders container for button groups.
//
// This component renders Bulma's .buttons class which groups
// multiple button elements together. Provides alignment,
// uniform sizing, and addon connection options. Perfect
// for toolbars, form actions, and button collections
// that need consistent spacing and alignment.
func Buttons(props ...ButtonsProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var13 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var13 == nil {
			templ_7745c5c3_Var13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p ButtonsProps
		if len(props) > 0 {
			p = props[0]
		}
		var templ_7745c5c3_Var14 = []any{"buttons",
			templ.KV(string(p.Size), p.Size != ""),
			templ.KV(string(p.Alignment), p.Alignment != ""),
			templ.KV("has-addons", p.HasAddons),
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var14...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "<div")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var15 string
			templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 276, Col: 12}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var14).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/button/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var13.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
