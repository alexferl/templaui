package table

import "strings"

// Color represents table row and cell color variants
type Color string

const (
	IsBlack   Color = "is-black"   // Black row/cell background
	IsDanger  Color = "is-danger"  // Danger/error row/cell (red)
	IsDark    Color = "is-dark"    // Dark row/cell background
	IsInfo    Color = "is-info"    // Info row/cell (blue)
	IsLight   Color = "is-light"   // Light row/cell background
	IsLink    Color = "is-link"    // Link-style row/cell
	IsPrimary Color = "is-primary" // Primary row/cell (brand color)
	IsSuccess Color = "is-success" // Success row/cell (green)
	IsText    Color = "is-text"    // Text-only row/cell
	IsWarning Color = "is-warning" // Warning row/cell (yellow)
	IsWhite   Color = "is-white"   // White row/cell background
)

// ContainerProps defines configuration for table containers.
//
// Use this type to configure Bulma .table-container elements which
// provide responsive horizontal scrolling for tables on smaller screens.
// Essential for maintaining table usability on mobile devices.
type ContainerProps struct {
	// Optional HTML id attribute for the table container
	ID string

	// List of additional CSS classes to apply to the container
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// Container renders responsive wrapper for tables.
//
// This component renders Bulma's .table-container class as a div element,
// which provides horizontal scrolling for tables on smaller screens.
// Essential for responsive design when tables have many columns that
// would otherwise break layout on mobile devices.
templ Container(props ...ContainerProps) {
	{{ var p ContainerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"table-container",
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

// TableProps defines configuration for table elements.
// Use this type to configure Bulma .table elements which style
// native HTML tables with consistent spacing, borders, and
// interactive states. Supports all standard table styling
// options including striped rows, hover effects, and sizing.
type TableProps struct {
	// Optional HTML id attribute for the table
	ID string

	// List of additional CSS classes to apply to the table
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Optional table caption for accessibility and screen readers
	Caption string

	// Vertically center content in all table cells
	IsVCentered bool

	// Enable hover effect on table rows
	IsHoverable bool

	// Add borders around table cells
	IsBordered bool

	// Table spans full width of its container
	IsFullwidth bool

	// Reduce cell padding for more compact display
	IsNarrow bool

	// Add alternating row background colors (zebra striping)
	IsStriped bool
}

// Table renders main table element with Bulma styling.
//
// This component renders Bulma's .table class on native HTML table
// elements, providing consistent styling for tabular data. Supports
// striped rows, hover effects, borders, and accessibility features
// like captions. Perfect for data tables, comparison charts, and
// structured information display.
templ Table(props ...TableProps) {
	{{ var p TableProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<table
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"table",
			templ.KV("is-bordered", p.IsBordered),
			templ.KV("is-fullwidth", p.IsFullwidth),
			templ.KV("is-narrow", p.IsNarrow),
			templ.KV("is-striped", p.IsStriped),
			templ.KV("is-vcentered", p.IsVCentered),
			templ.KV("is-hoverable", p.IsHoverable),
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		if p.Caption != "" {
			<caption>{ p.Caption }</caption>
		}
		{ children... }
	</table>
}

// HeadProps defines configuration for table header sections.
// Use this type to configure thead elements within Bulma tables.
// Contains column headers and defines table structure.
type HeadProps struct {
	// Optional HTML id attribute for the table head
	ID string

	// List of additional CSS classes to apply to the thead
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// Head renders table header section.
//
// This component renders a thead element for table column headers.
// Should contain Header components defining column structure and labels.
templ Head(props ...HeadProps) {
	{{ var p HeadProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<thead
		if p.ID != "" {
			id={ p.ID }
		}
		if len(p.Class) > 0 {
			class={ strings.Join(p.Class, " ") }
		}
		{ p.Attributes... }
	>
		{ children... }
	</thead>
}

// BodyProps defines configuration for table body sections.
// Use this type to configure tbody elements within Bulma tables.
// Contains the main table data rows and cells.
type BodyProps struct {
	// Optional HTML id attribute for the table body
	ID string

	// List of additional CSS classes to apply to the tbody
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// Body renders table body section.
//
// This component renders a tbody element containing the main table data.
// Should contain Row components with data cells.
templ Body(props ...BodyProps) {
	{{ var p BodyProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<tbody
		if p.ID != "" {
			id={ p.ID }
		}
		if len(p.Class) > 0 {
			class={ strings.Join(p.Class, " ") }
		}
		{ p.Attributes... }
	>
		{ children... }
	</tbody>
}

// FootProps defines configuration for table footer sections.
// Use this type to configure tfoot elements within Bulma tables.
// Typically contains summary information or additional headers.
type FootProps struct {
	// Optional HTML id attribute for the table footer
	ID string

	// List of additional CSS classes to apply to the tfoot
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// Foot renders table footer section.
//
// This component renders a tfoot element for table footers.
// Commonly used for summary rows, totals, or repeated headers.
templ Foot(props ...FootProps) {
	{{ var p FootProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<tfoot
		if p.ID != "" {
			id={ p.ID }
		}
		if len(p.Class) > 0 {
			class={ strings.Join(p.Class, " ") }
		}
		{ p.Attributes... }
	>
		{ children... }
	</tfoot>
}

// RowProps defines configuration for table rows.
// Use this type to configure tr elements within Bulma tables.
// Supports row-level styling including colors and selection states.
type RowProps struct {
	// Optional HTML id attribute for the table row
	ID string

	// List of additional CSS classes to apply to the tr
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Background color for the entire row
	Color Color

	// Mark row as selected with distinct styling
	IsSelected bool
}

// Row renders table row element.
//
// This component renders a tr element for table rows with optional
// color styling and selection states. Contains Header or Cell components.
templ Row(props ...RowProps) {
	{{ var p RowProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ hasClasses := p.Color != "" || p.IsSelected || len(p.Class) > 0 }}
	<tr
		if p.ID != "" {
			id={ p.ID }
		}
		if hasClasses {
			class={
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
		}
		{ p.Attributes... }
	>
		{ children... }
	</tr>
}

// HeaderProps defines configuration for table header cells.
// Use this type to configure th elements within Bulma tables.
// Supports accessibility attributes, styling, and cell-level options.
type HeaderProps struct {
	// Optional HTML id attribute for the header cell
	ID string

	// List of additional CSS classes to apply to the th
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Scope attribute for accessibility (col, row, colgroup, rowgroup)
	Scope string

	// Background color for the individual header cell
	Color Color

	// Reduce cell padding for compact display
	IsNarrow bool

	// Vertically center content in this cell
	IsVCentered bool

	// Mark cell as selected with distinct styling
	IsSelected bool
}

// Header renders table header cell element.
//
// This component renders a th element for table column headers
// with proper accessibility attributes and styling options.
// Essential for semantic table structure and screen reader support.
templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ hasClasses := p.Color != "" || p.IsNarrow || p.IsVCentered || p.IsSelected || len(p.Class) > 0 }}
	<th
		if p.ID != "" {
			id={ p.ID }
		}
		if hasClasses {
			class={
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-narrow", p.IsNarrow),
				templ.KV("is-vcentered", p.IsVCentered),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
		}
		if p.Scope != "" {
			scope={ p.Scope }
		}
		{ p.Attributes... }
	>
		{ children... }
	</th>
}

// CellProps defines configuration for table data cells.
// Use this type to configure td elements within Bulma tables.
// Supports cell-level styling including colors, sizing, and states.
type CellProps struct {
	// Optional HTML id attribute for the data cell
	ID string

	// List of additional CSS classes to apply to the td
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Background color for the individual data cell
	Color Color

	// Reduce cell padding for compact display
	IsNarrow bool

	// Vertically center content in this cell
	IsVCentered bool

	// Mark cell as selected with distinct styling
	IsSelected bool
}

// Cell renders table data cell element.
//
// This component renders a td element for table data cells
// with styling options for colors, spacing, and selection states.
// Contains the actual data content of the table.
templ Cell(props ...CellProps) {
	{{ var p CellProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	{{ hasClasses := p.Color != "" || p.IsNarrow || p.IsVCentered || p.IsSelected || len(p.Class) > 0 }}
	<td
		if p.ID != "" {
			id={ p.ID }
		}
		if hasClasses {
			class={
				templ.KV(string(p.Color), p.Color != ""),
				templ.KV("is-narrow", p.IsNarrow),
				templ.KV("is-vcentered", p.IsVCentered),
				templ.KV("is-selected", p.IsSelected),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
		}
		{ p.Attributes... }
	>
		{ children... }
	</td>
}
