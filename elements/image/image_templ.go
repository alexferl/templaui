// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package image

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "strings"

// Size represents fixed image container dimensions
type Size string

const (
	Is16x16   Size = "is-16x16"   // 16x16 pixel container (avatar)
	Is24x24   Size = "is-24x24"   // 24x24 pixel container (avatar)
	Is32x32   Size = "is-32x32"   // 32x32 pixel container (avatar)
	Is48x48   Size = "is-48x48"   // 48x48 pixel container (avatar)
	Is64x64   Size = "is-64x64"   // 64x64 pixel container (avatar)
	Is96x96   Size = "is-96x96"   // 96x96 pixel container (avatar)
	Is128x128 Size = "is-128x128" // 128x128 pixel container (avatar)
)

// Ratio represents aspect ratio modifiers for responsive images
type Ratio string

const (
	IsSquare Ratio = "is-square" // Square aspect ratio (1:1)
	Is1by1   Ratio = "is-1by1"   // 1:1 aspect ratio
	Is1by2   Ratio = "is-1by2"   // 1:2 aspect ratio (portrait)
	Is1by3   Ratio = "is-1by3"   // 1:3 aspect ratio (tall)
	Is2by1   Ratio = "is-2by1"   // 2:1 aspect ratio (wide)
	Is2by3   Ratio = "is-2by3"   // 2:3 aspect ratio (portrait)
	Is3by1   Ratio = "is-3by1"   // 3:1 aspect ratio (banner)
	Is3by2   Ratio = "is-3by2"   // 3:2 aspect ratio (photo)
	Is3by4   Ratio = "is-3by4"   // 3:4 aspect ratio (portrait)
	Is3by5   Ratio = "is-3by5"   // 3:5 aspect ratio (portrait)
	Is4by3   Ratio = "is-4by3"   // 4:3 aspect ratio (photo)
	Is4by5   Ratio = "is-4by5"   // 4:5 aspect ratio (portrait)
	Is5by3   Ratio = "is-5by3"   // 5:3 aspect ratio (wide)
	Is5by4   Ratio = "is-5by4"   // 5:4 aspect ratio (square-ish)
	Is9by16  Ratio = "is-9by16"  // 9:16 aspect ratio (mobile)
	Is16by9  Ratio = "is-16by9"  // 16:9 aspect ratio (widescreen)
)

// ImageProps defines configuration for image containers.
//
// Use this type to configure Bulma .image elements which provide
// precisely sized containers to prevent layout shifts during image
// loading or errors. Supports both fixed dimensions (for avatars)
// and responsive aspect ratios. The container ensures consistent
// spacing regardless of actual image loading state.
type ImageProps struct {
	// Optional HTML id attribute for the image container
	ID string

	// List of additional CSS classes to apply to the image container
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Image spans full width of its container
	IsFullwidth bool

	// Enable ratio-based responsive sizing
	HasRatio bool

	// Aspect ratio for responsive images (16:9, 4:3, etc.)
	Ratio Ratio

	// Fixed dimensions for square containers (avatars, icons)
	Size Size

	// Apply rounded corners to the image
	IsRounded bool
}

// Image renders a container for responsive images.
//
// This component renders Bulma's .image class as a figure element,
// which creates a precisely sized container that prevents layout
// shifts during image loading. Use Size for fixed square dimensions
// (ideal for avatars) or Ratio for responsive aspect ratios (ideal
// for photos and media). The container maintains its dimensions even
// if the image fails to load, ensuring consistent page layout.
func Image(props ...ImageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var p ImageProps
		if len(props) > 0 {
			p = props[0]
		}
		var templ_7745c5c3_Var2 = []any{"image",
			templ.KV(string(p.Size), p.Size != ""),
			templ.KV(string(p.Ratio), p.Ratio != ""),
			templ.KV("is-rounded", p.IsRounded),
			templ.KV("is-fullwidth", p.IsFullwidth),
			templ.KV("has-ratio", p.HasRatio),
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<figure")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if p.ID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(p.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/image/image.templ`, Line: 88, Col: 12}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `elements/image/image.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, p.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</figure>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
