package panel

import "strings"

// Color represents panel color variants for theming
type Color string

const (
	IsBlack   Color = "is-black"   // Black panel theme
	IsDanger  Color = "is-danger"  // Danger/error panel (red)
	IsDark    Color = "is-dark"    // Dark panel theme
	IsInfo    Color = "is-info"    // Info panel (blue)
	IsLight   Color = "is-light"   // Light panel theme
	IsLink    Color = "is-link"    // Link-style panel
	IsPrimary Color = "is-primary" // Primary panel (brand color)
	IsSuccess Color = "is-success" // Success panel (green)
	IsText    Color = "is-text"    // Text-only panel
	IsWarning Color = "is-warning" // Warning panel (yellow)
	IsWhite   Color = "is-white"   // White panel theme
)

// PanelProps defines configuration for panel container elements.
//
// Use this type to configure Bulma .panel elements which create
// composable containers for compact controls and information display.
// Multi-part component supporting headings, tabs, blocks, and icons.
// Perfect for sidebars, filters, control panels, and content organization.
type PanelProps struct {
	// Optional HTML id attribute for the panel container
	ID string

	// List of additional CSS classes to apply to the panel
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Panel color theme affecting heading and active elements
	Color Color

	// Allow panel content to wrap on smaller screens
	IsWrapped bool

	// Apply active state styling to the entire panel
	IsActive bool
}

// Panel renders composable containers for compact controls.
//
// This component renders Bulma's .panel class as a nav element,
// which creates versatile containers for organizing controls and
// information. Multi-part component that can contain headings, tabs,
// blocks, and icons in flexible combinations. Essential for creating
// sidebars, filter controls, and organized content displays.
templ Panel(props ...PanelProps) {
	{{ var p PanelProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<nav
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"panel",
			templ.KV(string(p.Color), p.Color != ""),
			templ.KV("is-active", p.IsActive),
			templ.KV("is-wrapped", p.IsWrapped),
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		{ children... }
	</nav>
}

// PanelHeadingProps defines configuration for panel header sections.
// Use this type to configure .panel-heading elements which provide
// title sections at the top of panels. Features colored background
// that matches the panel's color theme. Always appears as the first
// child element when used.
type PanelHeadingProps struct {
	// Optional HTML id attribute for the panel heading
	ID string

	// List of additional CSS classes to apply to the heading
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// PanelHeading renders panel header sections.
//
// This component renders Bulma's .panel-heading class as a p element,
// which creates title sections with colored backgrounds matching the
// panel theme. Should be used as the first child of panel containers
// for proper visual hierarchy and styling consistency.
templ PanelHeading(props ...PanelHeadingProps) {
	{{ var p PanelHeadingProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<p
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"panel-heading",
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		{ children... }
	</p>
}

// PanelTabsProps defines configuration for panel navigation tabs.
// Use this type to configure .panel-tabs elements which provide
// horizontal navigation within panels. Creates tab-style navigation
// for filtering or organizing panel content into categories.
type PanelTabsProps struct {
	// Optional HTML id attribute for the panel tabs
	ID string

	// List of additional CSS classes to apply to the tabs container
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// PanelTabs renders panel navigation tab sections.
//
// This component renders Bulma's .panel-tabs class as a p element,
// which creates horizontal tab navigation for organizing panel content.
// Should contain anchor elements for individual tab options and
// supports active state styling for current selection indication.
templ PanelTabs(props ...PanelTabsProps) {
	{{ var p PanelTabsProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<p
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"panel-tabs",
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		{ children... }
	</p>
}

// PanelBlockProps defines configuration for panel content blocks.
// Use this type to configure .panel-block elements which serve as
// versatile containers for panel content. Can render as div, anchor,
// or label elements depending on use case. Supports controls, inputs,
// buttons, icons, and other interactive elements.
type PanelBlockProps struct {
	// Optional HTML id attribute for the panel block
	ID string

	// List of additional CSS classes to apply to the block
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes

	// Render as anchor element for clickable blocks
	IsAnchor bool

	// Render as label element for form controls with checkboxes
	IsLabel bool

	// Apply active state styling to the block
	IsActive bool
}

// PanelBlock renders versatile panel content containers.
//
// This component renders Bulma's .panel-block class as div, anchor,
// or label elements depending on props. Serves as flexible containers
// for controls, inputs, buttons, icons, and other content. Supports
// active state styling and can function as clickable or form elements.
templ PanelBlock(props ...PanelBlockProps) {
	{{ var p PanelBlockProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.IsAnchor {
		<a
			if p.ID != "" {
				id={ p.ID }
			}
			class={
				"panel-block",
				templ.KV("is-active", p.IsActive),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			{ p.Attributes... }
		>
			{ children... }
		</a>
	} else if p.IsLabel {
		<label
			if p.ID != "" {
				id={ p.ID }
			}
			class={
				"panel-block",
				templ.KV("is-active", p.IsActive),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			{ p.Attributes... }
		>
			{ children... }
		</label>
	} else {
		<div
			if p.ID != "" {
				id={ p.ID }
			}
			class={
				"panel-block",
				templ.KV("is-active", p.IsActive),
				templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
			}
			{ p.Attributes... }
		>
			{ children... }
		</div>
	}
}

// PanelIconProps defines configuration for panel icon elements.
// Use this type to configure .panel-icon elements which provide
// icon placeholders within panel blocks. Typically used for
// visual indicators, status icons, or decorative elements
// alongside panel content.
type PanelIconProps struct {
	// Optional HTML id attribute for the panel icon
	ID string

	// List of additional CSS classes to apply to the icon container
	Class []string

	// Additional arbitrary HTML attributes
	Attributes templ.Attributes
}

// PanelIcon renders icon containers within panel blocks.
//
// This component renders Bulma's .panel-icon class as a span element,
// which creates consistent icon placeholders within panel content.
// Perfect for status indicators, category icons, or visual elements
// that complement panel text and controls.
templ PanelIcon(props ...PanelIconProps) {
	{{ var p PanelIconProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			"panel-icon",
			templ.KV(strings.Join(p.Class, " "), len(p.Class) > 0),
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}
